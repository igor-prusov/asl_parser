use std::str::FromStr;
use crate::ast::{Statement, Register, Bitfield};

grammar;

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Program: Vec<Statement<'input>> = {
    <v:(Statement)*> => v,
}

pub Statement: Statement<'input> = {
    <r:Register> => Statement::Register(r),
    r"//.*" => Statement::Comment,
}

pub Register: Register<'input> = {
    "__register" <number:Num> <r:RegisterBits> <name:String> ";" => Register {
        bits: number,
        name: name,
        bits_desc: r,
    }
}

RegisterBits: Vec<Bitfield<'input>> = "{" <v:Comma<Bitfield>> "}" => v;

Bitfield: Bitfield<'input> = {
    <to:Num> ":" <from:Num> <name:String> => Bitfield {<>}
}

Num: u32 = <s:r"[0-9]+"> => u32::from_str(s).unwrap();

String: &'input str = <s:r"[a-zA-Z][a-zA-Z0-9_]+"> => s;